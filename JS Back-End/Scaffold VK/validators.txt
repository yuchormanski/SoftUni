генериране на custom secret (в терминала): node -e "console.log(require('crypto').randomBytes(32).toString('hex'))" 


//email

const EMAIL_PATTERN = /^[a-zA-Z]+@[a-zA-Z]+\.[a-zA-Z]+$/i;
EMAIL_PATTERN.test(email)  -- boolean

require npm validator
        if (!validator.isEmail(req.body.email)) {
            throw new Error('Invalid email address!')
        };


//image model
const IMAGE_PATTERN = /^https?:\/\/.+(.png|.jpg|.jpeg)$/i;
        validate: {
            validator(value) {
                return IMAGE_PATTERN.test(value);
            },
            message: 'Image must be of type JPG, JPEG or PNG'
        }

---------------------
get selection result
създаваме утил функцията , която съдържа всички опции от селекта;
currentOption = записаната в DB стойност

function levels(currentOption) {
    const availableOptions = [
        { key: 'estate', label: 'Real Estate', selected: false },
        { key: 'vehicles', label: 'Vehicles', selected: false },
        { key: 'furniture', label: 'Furniture', selected: false },
        { key: 'electronics', label: 'Electronics', selected: false },
        { key: 'other', label: 'Other', selected: false },
    ]
    const result = availableOptions.map(x => x.key == currentOption ? { ...x, selected: true } : x);
    return result;
}

const selectOptions = levels(currentOption);

в темплейта : {{#each selectOptions}}
                <option value="{{key}}"{{#if selected}}select{{/if}}>{{label}}</option>
              {{/each}}

function categories(cat) {
    let category;
    if (cat == 'estate') { category = 'Real Estate' }
    else if (cat == 'vehicles') { category = 'Vehiclese' }
    else if (cat == 'furniture') { category = 'Furniture' }
    else if (cat == 'electronics') { category = 'Electronics' }
    else if (cat == 'other') { category = 'Other' }
    return category;
}

module.exports = { levels, categories };

--------------------------------------------------------
search by criteria(multiple)
(in this case 2 )

async function searchStrings(criteria_1, criteria_2){
	return await Model.find({Model.prop1: {$regex : criteria_1}, Model.prop2: {$regex: criteria_2}}).lean();
	
	//case-insensitive
	return await Model.find({ Model.prop: { $regex: criteria, $options: 'i' } })
}

-------------------------------------------------------
sort
    * -1 => b - a
    * 1 => a - b
Model.find().sort({ Model.prop: -1 });

-------------------------------------------------------
limit
Model.find().limit(3);



-------------------------------------------------------

                                                                                
exports.voteDown = async (id, userId) => Post.findByIdAndUpdate(id, { $push: { votes: userId }, $inc:{rating: -1} });

votes = Array, добавяме елемент;
rating e число. -1 -> изваждаме 1 от rating, 1 -> добавяме( съответно -3, 3....)


---------------------------------------------------------
virtuals

userSchema.virtual('fullName').
  get(function() { return `${this.firstName} ${this.lastName}`; }).
  set(function(v) {
    // `v` is the value being set, so use the value to set
    // `firstName` and `lastName`.
    const firstName = v.substring(0, v.indexOf(' '));
    const lastName = v.substring(v.indexOf(' ') + 1);
    this.set({ firstName, lastName });
  });
  
  
  -----------------------------------
  v1.
  validate: {
	validator: function(value){
		return value.startsWith('http://') || value.startsWith('https://');
	},
	message: 'URL is Invalid!'
}
		
		
	v2.
match: [/^https?:\/\//, 'Invalid URL!'],

v3. - worked the best
in controller

        if (/(http(s?)):\/\//i.test(imageUrl) === false) {
            throw new Error('Invalid image URL!')
        }
		
in Model:

validate: [/(http(s?)):\/\//i, 'The photo image should start with http:// or https://']

//with image file extention
validate: /^((http(s?)):\/\/).+(\.jpg|\.png|\.jpeg)$/i

---------------------------------------------------
get last Three entries
exports.getThree = () => Housing.find().sort({ _id: -1 }).limit(3)
респектвно пъвите три -  Housing.find().sort({ _id: 1 }).limit(3)
