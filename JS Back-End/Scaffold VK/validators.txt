//email

const EMAIL_PATTERN = /^[a-zA-Z]+@[a-zA-Z]+\.[a-zA-Z]+$/i;
EMAIL_PATTERN.test(email)  -- boolean

require npm validator
validator.isEmail(req.body.email) -- boolean


//image model
const IMAGE_PATTERN = /^https?:\/\/.+(.png|.jpg|.jpeg)$/i;
        validate: {
            validator(value) {
                return IMAGE_PATTERN.test(value);
            },
            message: 'Image must be of type JPG, JPEG or PNG'
        }

---------------------
get selection result

function levels(currentLevel) {
    const difficultyLevels = [
        { key: 'estate', label: 'Real Estate', selected: false },
        { key: 'vehicles', label: 'Vehicles', selected: false },
        { key: 'furniture', label: 'Furniture', selected: false },
        { key: 'electronics', label: 'Electronics', selected: false },
        { key: 'other', label: 'Other', selected: false },
    ]
    const result = difficultyLevels.map(x => x.label == currentLevel ? { ...x, selected: true } : x);
    return result;
}

function categories(cat) {
    let category;
    if (cat == 'estate') { category = 'Real Estate' }
    else if (cat == 'vehicles') { category = 'Vehiclese' }
    else if (cat == 'furniture') { category = 'Furniture' }
    else if (cat == 'electronics') { category = 'Electronics' }
    else if (cat == 'other') { category = 'Other' }
    return category;
}

module.exports = { levels, categories };

--------------------------------------------------------
search by criteria(multiple)
(in this case 2 )

async function searchStrings(criteria_1, criteria_2){
	return await Model.find({Model.prop1: {$regex : criteria_1}, Model.prop2: {$regex: criteria_2}}).lean();
}

-------------------------------------------------------
sort
    * -1 => b - a
    * 1 => a - b
Model.find().sort({ Model.prop: -1 });

-------------------------------------------------------
limit
Model.find().limit(3);
